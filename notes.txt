IMPORTANT SELF NOTES :-

1. @Request Body is similar to @RequestParam
2. @RestController is used for returning data and json objects, while @Controller is used for returning views and models, and that is the difference,
e.g. if we return a string in @Controller class methods it expects a view but @RestController instantly converts it into an object and show it on browser
Important - We can also use @ResponseBody in a controller method in the @RequestMapping to return a json string........

3. URI's are created for the sake of user by thinking from their perspective and we need to give them correct response status...

4. Before giving the UserNotFoundException by us, we got the response status of 500, which was wrong we should get 404 for this...

**5. CustomizedResponseEntityExceptionHandler is made to show self made json object for errors, for which ErrorDetails class is also made for the json object showing only 3 details.....
see it on talend api tester...

6. @ControllerAdvice is also a specialization of @Component like @Controller or @Service....

7. starter-validation dependency is added as done in myfirstwebapp project...

8. starter dependency is added for open-api documentation.....
and http://localhost:8080/swagger-ui.html is used accessing swagger-ui and /v3/api-docs link given to open api-docs made by open-api...... 

9. jackson-dataformat dependency is added for content negotiation.....

10. use tailend api tester and inside it use header to get json,xml,etc. response back.....

11. see "params" attribute of @GetMapping used in Versioning.... 
Also : "headers" attribute used for request header and "produces" attribute used for accept header

12. HATEOAS means adding links to the page and showing infos
like showing no. of likes and shares on a post (like fb,insta), etc......
dependency for hateoas is also added in pom.xml
**We can say that HAL explorer is the implementation of the concept/architecture provided by the HATEOAS....

13. Dependency for hal explorer is also added in pom.xml...
Go to localhost:8080 to use it, it also shows actuators in a more interactive way on opening in it....

14. foreign key is automatically generated by hibernate for relation b/w user and post...
and a new field user_id is created in post entity by it automatically.........

15. UserResource.java(handled by UserJpaResource), UserDaoService.java(handled by Hibernate/Jpa) and data.sql is not needed anymore...

16. Remember : use /jpa/users instead of /users

17. in JPA, the variable of an entity like birthDate, becomes birth-date.....